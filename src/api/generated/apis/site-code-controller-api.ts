/* tslint:disable */
/* eslint-disable */
/**
 * Enterprise API
 * React + TypeScript + Spring Boot OpenAPI
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { SiteCodeDTO } from '../models';
// @ts-ignore
import type { SiteCodeSearchDTO } from '../models';
/**
 * SiteCodeControllerApi - axios parameter creator
 */
export const SiteCodeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SiteCodeSearchDTO} arg2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (arg2: SiteCodeSearchDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'arg2' is not null or undefined
            assertParamExists('getList', 'arg2', arg2)
            const localVarPath = `/api/sitecode/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (arg2 !== undefined) {
                for (const [key, value] of Object.entries(arg2)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SiteCodeControllerApi - functional programming interface
 */
export const SiteCodeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SiteCodeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SiteCodeSearchDTO} arg2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(arg2: SiteCodeSearchDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SiteCodeDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(arg2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiteCodeControllerApi.getList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SiteCodeControllerApi - factory interface
 */
export const SiteCodeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SiteCodeControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {SiteCodeControllerApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: SiteCodeControllerApiGetListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<SiteCodeDTO>> {
            return localVarFp.getList(requestParameters.arg2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SiteCodeControllerApi - interface
 */
export interface SiteCodeControllerApiInterface {
    /**
     * 
     * @param {SiteCodeControllerApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getList(requestParameters: SiteCodeControllerApiGetListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<SiteCodeDTO>>;

}

/**
 * Request parameters for getList operation in SiteCodeControllerApi.
 */
export interface SiteCodeControllerApiGetListRequest {
    readonly arg2: SiteCodeSearchDTO
}

/**
 * SiteCodeControllerApi - object-oriented interface
 */
export class SiteCodeControllerApi extends BaseAPI implements SiteCodeControllerApiInterface {
    /**
     * 
     * @param {SiteCodeControllerApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getList(requestParameters: SiteCodeControllerApiGetListRequest, options?: RawAxiosRequestConfig) {
        return SiteCodeControllerApiFp(this.configuration).getList(requestParameters.arg2, options).then((request) => request(this.axios, this.basePath));
    }
}

